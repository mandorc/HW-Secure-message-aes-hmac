
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
/**
 *
 * @author arman
 */
public class FrameClient extends javax.swing.JInternalFrame {

    private String nombre;
    private String id;

    public FrameClient(String nombre, String id) {
        initComponents();

        jLabel7.setVisible(false);
        this.nombre = nombre;
        this.id = id;
        setTitle(nombre);     // establece el título solo con el nombre

        setupFields();

        /// Registrar este cliente por su ID
        boolean ok = ClientRegistry.get().register(this.id, this);
        if (!ok) {
            jLabel7.setText("ID en uso");
            jLabel7.setForeground(java.awt.Color.RED);
        }

        // Darse de baja al cerrar
        addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                ClientRegistry.get().unregister(FrameClient.this.id);
            }
        });

        // Acción del botón "Comprobar"
        checkAvalability.addActionListener(evt -> checkAvailabilityAction());
        sendButton.addActionListener(evt -> sendMessageAction());
        deleteUser.addActionListener(evt -> dispose()); // cierra y dispara el unregister

    }

    private void checkAvailabilityAction() {
        String target = destUser.getText();
        if (target == null) {
            target = "";
        }
        target = target.trim().toLowerCase();

        if (target.isEmpty()) {
            jLabel7.setText("Escribe un ID");
            jLabel7.setForeground(java.awt.Color.RED);
            return;
        }
        if (target.equals(this.id)) {
            jLabel7.setText("Es tu propio ID");
            jLabel7.setForeground(java.awt.Color.ORANGE);
            return;
        }

        boolean exists = ClientRegistry.get().exists(target);
        if (exists) {
            jLabel7.setText("Disponible");
            jLabel7.setForeground(new java.awt.Color(0, 128, 0)); // verde
            // aquí podrías guardar el destinatario, si lo necesitas
            // this.currentRecipientId = target;
            try {
                CryptoKit.Keys keys = CryptoKit.derive(this.id, target);

                // Mostrar la llave AES (Base64 para que sea legible)
                aesKeyField.setText(
                        java.util.Base64.getEncoder().encodeToString(keys.aes.getEncoded())
                );

                // Mostrar la llave HMAC (Base64)
                aesKeyField1.setText(
                        java.util.Base64.getEncoder().encodeToString(keys.mac.getEncoded())
                );

            } catch (Exception e) {
                e.printStackTrace();
                aesKeyField.setText("Error generando AES");
                aesKeyField1.setText("Error generando HMAC");
            }
        } else {
            jLabel7.setText("No encontrado");
            jLabel7.setForeground(java.awt.Color.RED);
        }

        FrameClient receptor = ClientRegistry.get().get(target);
        try {
            CryptoKit.Keys keys = CryptoKit.derive(this.id, target);

            aesKeyField.setText(
                    java.util.Base64.getEncoder().encodeToString(keys.aes.getEncoded())
            );
            aesKeyField1.setText(
                    java.util.Base64.getEncoder().encodeToString(keys.mac.getEncoded())
            );

            // También mostrar en el cliente receptor
            CryptoKit.Keys keysForReceptor = CryptoKit.derive(target, this.id);
            receptor.showKeys(keysForReceptor);

        } catch (Exception e) {
            e.printStackTrace();
            aesKeyField.setText("Error AES");
            aesKeyField1.setText("Error HMAC");
        }
    }

    public void showKeys(CryptoKit.Keys keys) {
        aesKeyField.setText(
                java.util.Base64.getEncoder().encodeToString(keys.aes.getEncoded())
        );
        aesKeyField1.setText(
                java.util.Base64.getEncoder().encodeToString(keys.mac.getEncoded())
        );
    }

    public String getNombre() {
        return nombre;
    }

    public String getIdCliente() {
        return id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        username = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        userID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        destUser = new javax.swing.JTextField();
        checkAvalability = new javax.swing.JButton();
        aesKeyLabel = new javax.swing.JLabel();
        aesKeyField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inboxPane = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        txtField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        deleteUser = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        aesKeyField1 = new javax.swing.JTextField();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        username.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        username.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        username.setText("Armando Rivera Castillo");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("ID:");

        userID.setText("identificadorUnico");

        jLabel3.setText("Destinatario:");

        checkAvalability.setText("Comprobar");

        aesKeyLabel.setText("Llave AES:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Mensajes de entrada:");

        jScrollPane1.setViewportView(inboxPane);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Mensaje para enviar:");

        sendButton.setText("Enviar");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        deleteUser.setText("Eliminar usuario");

        jLabel7.setText("Error: Este mensaje ha sido modificado");

        jLabel8.setText("Llave HMAC:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destUser, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkAvalability, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                    .addComponent(txtField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(deleteUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendButton))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(aesKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(aesKeyField, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addComponent(aesKeyField1))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(destUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkAvalability))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aesKeyLabel)
                    .addComponent(aesKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(aesKeyField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(deleteUser))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 399, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 354, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendButtonActionPerformed

    private void setupFields() {
        username.setText(this.nombre);
        userID.setText(this.id);
    }

    private void sendMessageAction() {
        String target = destUser.getText();
        if (target == null) {
            target = "";
        }
        target = target.trim().toLowerCase();

        String msg = txtField.getText();
        if (msg == null) {
            msg = "";
        }
        msg = msg.trim();

        if (target.isEmpty()) {
            showStatus("Escribe un ID destino", java.awt.Color.RED);
            return;
        }
        if (msg.isEmpty()) {
            showStatus("Escribe un mensaje", java.awt.Color.RED);
            return;
        }
        if (target.equals(this.id.toLowerCase())) {
            showStatus("Es tu propio ID", java.awt.Color.ORANGE);
            return;
        }

        FrameClient receptor = ClientRegistry.get().get(target);
        if (receptor == null) {
            showStatus("Destinatario no encontrado", java.awt.Color.RED);
            return;
        }

        try {
            // Cifrar mensaje + HMAC
            String packet = CryptoKit.encryptThenMac(msg, this.id, target);

            // Pasar a FrameMITM
            FrameMITM mitm = new FrameMITM();
            MainInterface.jDesktopPane_menu.add(mitm);
            mitm.setVisible(true);

            mitm.setPacket(this.id, target, packet, msg, receptor); // método que debes crear

        } catch (Exception e) {
            showStatus("Error al cifrar", java.awt.Color.RED);
            e.printStackTrace();
        }

    }

    public void receiveMessage(String fromId, String fromName, String msg) {
        // Asegura actualización en el EDT
        javax.swing.SwingUtilities.invokeLater(() -> {
            appendInbox(fromName + ": " + msg);
        });
    }

    private void appendInbox(String line) {
        String prev = inboxPane.getText();
        if (prev == null || prev.isEmpty()) {
            inboxPane.setText(line);
        } else {
            inboxPane.setText(prev + "\n" + line);
        }
    }

    private void showStatus(String text, java.awt.Color color) {
        if (text == null || text.isEmpty()) {
            jLabel7.setVisible(false); // si no hay texto, ocultar
        } else {
            jLabel7.setText(text);
            jLabel7.setForeground(color);
            jLabel7.setVisible(true); // solo mostrar si hay texto
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aesKeyField;
    private javax.swing.JTextField aesKeyField1;
    private javax.swing.JLabel aesKeyLabel;
    private javax.swing.JButton checkAvalability;
    private javax.swing.JButton deleteUser;
    private javax.swing.JTextField destUser;
    private javax.swing.JTextPane inboxPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField txtField;
    private javax.swing.JLabel userID;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
